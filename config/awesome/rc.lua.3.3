require("awful")
require("beautiful")
require("naughty")
-- require("wicked")
require("debian.menu")

-- {{{ General
modkey          = "Mod4"
terminal        = "x-terminal-emulator"
editor          = os.getenv("EDITOR") or "editor"
theme_path      = awful.util.getdir("config") .. "/theme"
beautiful.init (theme_path)

layouts = {
    awful.layout.suit.fair,
    awful.layout.suit.max,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.right,
}

floatapps = {
    ["MPlayer"]     = true,
    ["gimp"]        = true,
    ["Stardict"]    = true,
    ["Qq"]          = true,
    ["feh"]         = true,
    ["display"]     = true,
    ["dia"]         = true,
    ["a.out"]       = true,

    -- Firefox --
    ["Download"]    = true,
    ["Browser"]     = true,
    ["Extension"]   = true,
}

apptags = {
    ["Iceweasel"]   = { screen = 1, tag = 2 },
    ["Firefox"]     = { screen = 1, tag = 2 },
    ["Mutt"]        = { screen = 1, tag = 3 },
    ["Weechat"]     = { screen = 1, tag = 3 },
    ["Scrot"]       = { screen = 1, tag = 3 },
    ["Gitk"]        = { screen = 1, tag = 4 },
    ["VirtualBox"]  = { screen = 1, tag = 8 },
}

toggletags = {
    ["x-terminal-emulator"] = { screen = 1, tag = 1 },
}
-- }}}

-- {{{ Tags
mytags = {
    { name = "☷", layout = layouts[1], setslave = true },
    { name = "☳", layout = layouts[2], mwfact = 0.618 },
    { name = "☵", layout = layouts[3], mwfact = 0.618 },
    { name = "☱", layout = layouts[3], mwfact = 0.935 },
    { name = "☶", layout = layouts[3], mwfact = 0.935 },
    { name = "☲", layout = layouts[3] },
    { name = "☴", layout = layouts[3], mwfact = 0.618 },
    { name = "☰", layout = layouts[3] },
}
for s = 1, screen.count() do
    tags = { }
    tags[s] = { }
    for i, v in ipairs(mytags) do
        tags[s][i] = tag(v.name)
        tags[s][i].screen = s
        awful.tag.setproperty(tags[s][i], "layout",   v.layout)
        awful.tag.setproperty(tags[s][i], "mwfact",   v.mwfact)
        awful.tag.setproperty(tags[s][i], "setslave", v.setslave)
    --  awful.tag.setproperty(tags[s][i], "nmaster",  v.nmaster)
    --  awful.tag.setproperty(tags[s][i], "ncols",    v.ncols)
    --  awful.tag.setproperty(tags[s][i], "icon",     v.icon)
    end
    tags[s][6].selected = true
end
-- }}}

-- {{{ Wibox

-- Menu {{{
mymainmenu = awful.menu.new({
    items = {
        { "Debian", debian.menu.Debian_menu.Debian }
    }
})

mylauncher = awful.widget.launcher({
    image = image(beautiful.awesome_icon),
    menu  = mymainmenu
})
-- }}}

-- {{{ Base
mytextbox = widget({ type = "textbox", align = "right" })
mytextbox.text = "<b><small> " .. awesome.release .. " </small></b>"
mysystray = widget({ type = "systray", align = "right" })
mytaglist = {}
mytasklist = {}
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
-- }}}

-- CPU wicked {{{
cpugraphwidget = widget({
    type = 'graph',
    name = 'cpugraphwidget',
    align = 'right'
})

cpugraphwidget.height = 1.0
cpugraphwidget.width = 45
cpugraphwidget.bg = '#333333'
cpugraphwidget.border_color = '#0a0a0a'
cpugraphwidget.grow = 'left'

cpugraphwidget:plot_properties_set('cpu', {
    fg = '#AEC6D8',
    fg_center = '#285577',
    fg_end = '#285577',
    vertical_gradient = false
})

wicked.register(cpugraphwidget, wicked.widgets.cpu, '$1', 1, 'cpu')
-- }}}

-- {{{ calendar wicked
local calendar
mytextbox.mouse_enter = function ()
    local fc = ""
    local f  = io.popen("date; cal")
    for line in f:lines() do
        fc = fc .. line .. '\n'
    end
    f:close()

    calendar = naughty.notify({
        text = string.format('<span font_desc="%s">%s</span>', "WenQuanYi Zen Hei Mono", fc),
        timeout = 6, width = 180, screen = mouse.screen })
end 
mytextbox.mouse_leave = function () naughty.destroy(calendar) end
-- }}}

-- {{{ Mouse bindings
mytaglist.buttons = awful.util.table.join(
    awful.button({ }, 1, awful.tag.viewonly),
    awful.button({ modkey }, 1, awful.client.movetotag),
    awful.button({ }, 3, function (tag) tag.selected = not tag.selected end),
    awful.button({ modkey }, 3, awful.client.toggletag),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
)

mytasklist.buttons = awful.util.table.join(
    awful.button({ }, 1, function (c)
                             if not c:isvisible() then
                                 awful.tag.viewonly(c:tags()[1])
                             end
                             client.focus = c
                             c:raise()
                         end),
    awful.button({ }, 3, function ()
                             if instance then
                                 instance:hide()
                                 instance = nil
                             else
                                 instance = awful.menu.clients({ width=250 })
                             end
                         end),
    awful.button({ }, 4, function ()
                             awful.client.focus.byidx(1)
                             if client.focus then client.focus:raise() end
                         end),
    awful.button({ }, 5, function ()
                             awful.client.focus.byidx(-1)
                             if client.focus then client.focus:raise() end
                         end)
)
-- }}}

-- {{{ Install the Wibox
for s = 1, screen.count() do
    mypromptbox[s] = awful.widget.prompt({ align = "left" })
    mylayoutbox[s] = widget({ type = "imagebox", align = "right" })
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    mywibox[s] = wibox({ position = "top", fg = beautiful.fg_normal, bg = beautiful.bg_normal })
    mywibox[s].widgets = { mylauncher,
                           mytaglist[s],
                           mytasklist[s],
                           mypromptbox[s],
                           cpugraphwidget,
                           mytextbox,
                           s == 1 and mysystray or nil }
    mywibox[s].screen = s
end
-- }}}

-- }}}

-- {{{ Hooks
-- Hook function to execute when focusing a client.
awful.hooks.focus.register(function (c)
    if not awful.client.ismarked(c) then
        c.border_color = beautiful.border_focus
    end
end)

-- Hook function to execute when unfocusing a client.
awful.hooks.unfocus.register(function (c)
    if not awful.client.ismarked(c) then
        c.border_color = beautiful.border_normal
    end
end)

-- Hook function to execute when marking a client
awful.hooks.marked.register(function (c)
    c.border_color = beautiful.border_marked
end)

-- Hook function to execute when unmarking a client.
awful.hooks.unmarked.register(function (c)
    c.border_color = beautiful.border_focus
end)

-- Hook function to execute when the mouse enters a client.
awful.hooks.mouse_enter.register(function (c)
    -- Sloppy focus, but disabled for magnifier layout
    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
        and awful.client.focus.filter(c) then
        -- client.focus = c
    end
end)

-- Hook function to execute when a new client appears.
awful.hooks.manage.register(function (c, startup)
    -- If we are not managing this application at startup,
    -- move it to the screen where the mouse is.
    -- We only do it for filtered windows (i.e. no dock, etc).
    if not startup and awful.client.focus.filter(c) then
        c.screen = mouse.screen
    end

    client.focus = c

    -- Add mouse bindings
    c:buttons(awful.util.table.join(
        awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
        awful.button({ modkey }, 1, awful.mouse.client.move),
        awful.button({ modkey }, 3, awful.mouse.client.resize)
    ))
    -- New client may not receive focus
    -- if they're not focusable, so set border anyway.
    c.border_width = beautiful.border_width
    c.border_color = beautiful.border_normal

    -- Check if the application should be floating.
    local cls = c.class
    local inst = c.instance
    if floatapps[cls] ~= nil then
        awful.client.floating.set(c, floatapps[cls])
    elseif floatapps[inst] ~= nil then
        awful.client.floating.set(c, floatapps[inst])
    end

    -- Check application->screen/tag mappings.
    local target
    if apptags[cls] then
        target = apptags[cls]
        awful.client.movetotag(tags[target.screen][target.tag], c)
    elseif apptags[inst] then
        target = apptags[inst]
        awful.client.movetotag(tags[target.screen][target.tag], c)
    end

    -- Check application->toggletag mappings.
    if toggletags[cls] then
        target = toggletags[cls]
        awful.client.toggletag(tags[target.screen][target.tag], c)
    elseif toggletags[inst] then
        target = toggletags[inst]
        awful.client.toggletag(tags[target.screen][target.tag], c)
    end

    -- Set key bindings
    c:keys(clientkeys)

    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    awful.client.setslave(c)

    -- Honor size hints: if you want to drop the gaps between windows, set this to false.
    c.size_hints_honor = false

    c:redraw()
end)

-- Hook function to execute when arranging the screen.
-- (tag switch, new client, etc)
awful.hooks.arrange.register(function (screen)
    local layout = awful.layout.getname(awful.layout.get(screen))
    if layout and beautiful["layout_" ..layout] then
        mylayoutbox[screen].image = image(beautiful["layout_" .. layout])
    else
        mylayoutbox[screen].image = nil
    end

    -- Give focus to the latest client in history if no window has focus
    -- or if the current window is a desktop or a dock one.
    if not client.focus then
        local c = awful.client.focus.history.get(screen, 0)
        if c then client.focus = c end
    end
end)

-- Hook called every minute
awful.hooks.timer.register(60, function ()
    mytextbox.text = os.date(" %H:%M ")
end)
-- }}}

-- {{{ Key bindings

-- {{{ Global
globalkeys = awful.util.table.join (

    -- {{{ Screen
    awful.key({ modkey, "Control" }, "Left",   function () awful.screen.focus(-1) end),
    awful.key({ modkey, "Control" }, "Right",  function () awful.screen.focus( 1) end),
    awful.key({ modkey }, "Escape", function () mymainmenu:show(true)  end),
    -- }}}

    -- {{{ Tag
    awful.key({ modkey            }, "Tab", awful.tag.history.restore),
    awful.key({ modkey            }, ";", awful.tag.history.restore),
    awful.key({ modkey, "Control" }, ".", awful.tag.viewnext),
    awful.key({ modkey, "Control" }, ",", awful.tag.viewprev),
    awful.key({ modkey,           }, "9", function () awful.tag.incmwfact(-0.015)   end),
    awful.key({ modkey,           }, "0", function () awful.tag.incmwfact( 0.015)   end),
    awful.key({ modkey, "Shift"   }, "9", function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "0", function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "9", function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "0", function () awful.tag.incncol(-1)         end),
    -- }}}

    -- {{{ Clients
    awful.key({ modkey }, ".", function ()
        awful.client.focus.byidx( 1)
    end),
    awful.key({ modkey }, ",", function ()
        awful.client.focus.byidx(-1)
    end),
    awful.key({ modkey }, "n", function ()
        awful.client.focus.byidx( 1)
        client.focus:raise()
    end),
    awful.key({ modkey }, "p", function ()
        awful.client.focus.byidx(-1)
        client.focus:raise()
    end),
    awful.key({ modkey }, "grave", function ()
        awful.client.focus.history.previous()
    end),
    awful.key({ modkey }, "y", function ()
        local c = awful.client.getmarked()[1]
        if c then
            awful.tag.viewonly(c:tags()[1])
            client.focus = c
            c:raise()
        end
    end),

    awful.key({ modkey }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey }, "z", awful.client.movetoscreen),
    awful.key({ modkey }, "o", awful.client.floating.toggle),
    awful.key({ modkey }, "t", awful.client.togglemarked),

    awful.key({ modkey }, "Up",     function () awful.client.focus.bydirection("up")    end),
    awful.key({ modkey }, "k",      function () awful.client.focus.bydirection("up")    end),
    awful.key({ modkey }, "Down",   function () awful.client.focus.bydirection("down")  end),
    awful.key({ modkey }, "j",      function () awful.client.focus.bydirection("down")  end),
    awful.key({ modkey }, "Left",   function () awful.client.focus.bydirection("left")  end),
    awful.key({ modkey }, "h",      function () awful.client.focus.bydirection("left")  end),
    awful.key({ modkey }, "Right",  function () awful.client.focus.bydirection("right") end),
    awful.key({ modkey }, "l",      function () awful.client.focus.bydirection("right") end),

    awful.key({ modkey, "Shift"   }, ".",  function () awful.client.swap.byidx(  1)      end),
    awful.key({ modkey, "Shift"   }, ",",  function () awful.client.swap.byidx( -1)      end),

    awful.key({ modkey            }, "i",  function () client.focus:raise()              end),
    awful.key({ modkey, "Shift"   }, "i",  function () client.focus:lower()              end),
    -- }}}

    -- {{{ Layout
    awful.key({ modkey, "Control" }, "Return", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "Return", function () awful.layout.inc(layouts, -1) end),
    -- }}}

    -- {{{ Program
    awful.key({ modkey }, "F2", function () awful.util.spawn("x-www-browser") end),
    awful.key({ modkey }, "F3", function () awful.util.spawn("urxvt -name Mutt -T Mutt -e mutt") end),
    awful.key({ modkey }, "F4", function () awful.util.spawn("qtwitter") end),
    awful.key({ modkey }, "F5", function () awful.util.spawn("urxvt -name Weechat -T Weechat -e weechat-curses") end),
    awful.key({ modkey }, "F8", function () awful.util.spawn("VirtualBox") end),
    awful.key({ modkey }, "space", function () awful.util.spawn("x-terminal-emulator") end),
    awful.key({ modkey }, "Print", function () awful.util.spawn("urxvt -name Scrot -e scrot -s /tmp/'%Y-%m-%d_$wx$h.png'") end),
    awful.key({        }, "Print", function () awful.util.spawn("scrot /tmp/'%Y-%m-%d_$wx$h.png'") end),
    awful.key({        }, "XF86AudioPlay",        function () awful.util.spawn("mocp.sh") end),
    awful.key({        }, "XF86AudioStop",        function () awful.util.spawn("mocp -s") end),
    awful.key({        }, "XF86AudioPrev",        function () awful.util.spawn("mocp -r") end),
    awful.key({        }, "XF86AudioNext",        function () awful.util.spawn("mocp -f") end),
    awful.key({        }, "XF86AudioLowerVolume", function () awful.util.spawn("mocp -v -1") end),
    awful.key({        }, "XF86AudioRaiseVolume", function () awful.util.spawn("mocp -v +1") end),
    -- }}}

    -- {{{ calendar
    awful.key({ modkey, "Control" }, "d", function ()
        if calendar ~= nil then
            naughty.destroy(calendar)
            calendar = nil
            return
        end

        local fc = ""
        local f  = io.popen("date; cal")
        for line in f:lines() do
            fc = fc .. line .. '\n'
        end
        f:close()

        calendar = naughty.notify({
            text = string.format('<span font_desc="%s">%s</span>', "WenQuanYi Zen Hei Mono", fc),
            timeout = 0, width = 180, screen = mouse.screen })
     end),
    -- }}}

    -- {{{ sdcv/stardict
    awful.key({ modkey }, "d", function ()
        local f = io.popen("xsel -o")
        local new_word = f:read("*a")
        f:close()

        if frame ~= nil then
            naughty.destroy(frame)
            frame = nil
            if old_word == new_word then
                return
            end
        end
        old_word = new_word

        local fc = ""
        local f  = io.popen("sdcv -n --utf8-output -u '牛津英汉双解美化版' "..new_word)
        for line in f:lines() do
            fc = fc .. line .. '\n'
        end
        f:close()

        frame = naughty.notify({ text = fc, timeout = 180, width = 360 })
    end),
    awful.key({ modkey, "Shift" }, "d", function ()
        awful.prompt.run({prompt = "Dict: "}, mypromptbox[mouse.screen].widget, function(cin_word)
            naughty.destroy(frame)

            if cin_word == "" then
                return
            end

            local fc = ""
            local f  = io.popen("sdcv -n --utf8-output -u 'XDICT英汉辞典' -u 'XDICT汉英辞典' "..cin_word)
            for line in f:lines() do
                fc = fc .. line .. '\n'
            end
            f:close()

            frame = naughty.notify({ text = fc, timeout = 6, width = 320 })
        end, nil, awful.util.getdir("cache").."/dict")
    end),
    -- }}}

    -- {{{ Others
    awful.key({ modkey }, "r", function () mypromptbox[mouse.screen]:run() end),
    awful.key({ modkey, "Control" }, "r", awesome.restart)
    -- }}}

)
--- }}}

-- {{{ Tags
keynumber = 0
for s = 1, screen.count() do
    keynumber = math.min(8, math.max(#tags[s], keynumber));
end
for i = 1, keynumber do
    --
    -- 1  2  3  4  5  6  7  8
    -- ------------------------
    -- 1  2  3    |   1  2  3 
    --  4  5  6   |    q  w  e
    --   7  8     |     a  s
    -- ------------------------
    --
    if     i == 4 then j = "q"
    elseif i == 5 then j = "w"
    elseif i == 6 then j = "e"
    elseif i == 7 then j = "a"
    elseif i == 8 then j = "s"
    else   j = i
    end

    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, j, function ()
            local screen = mouse.screen
            local t = awful.tag.selected(screen)
            local v = tags[screen][i]
            if v == t then
                awful.tag.history.restore(screen)
            else
                awful.tag.viewonly(v)
            end
        end),
        awful.key({ modkey, "Control" }, j, function ()
            local screen = mouse.screen
            if tags[screen][i] then
                tags[screen][i].selected = not tags[screen][i].selected
            end
        end),
        awful.key({ modkey, "Shift" }, j, function ()
            if client.focus and tags[client.focus.screen][i] then
                awful.client.movetotag(tags[client.focus.screen][i])
            end
        end),
        awful.key({ modkey, "Control", "Shift" }, j, function ()
            if client.focus and tags[client.focus.screen][i] then
                awful.client.toggletag(tags[client.focus.screen][i])
            end
        end),
        awful.key({ modkey, "Shift" }, "F" .. i, function ()
            local screen = mouse.screen
            if tags[screen][j] then
                for k, c in pairs(awful.client.getmarked()) do
                    awful.client.movetotag(tags[screen][j], c)
                end
            end
        end))
end
-- }}}

-- {{{ Client
clientkeys = awful.util.table.join(
    awful.key({ modkey            }, "c",       function (c)
        c:kill()
    end),

    awful.key({ modkey, "Shift"   }, "r",       function (c)
        c:redraw()
    end),

    awful.key({ modkey            }, "f",       function (c)
        c.fullscreen = not c.fullscreen
    end),

    awful.key({ modkey            }, "m",       function (c)
        c.maximized_horizontal = not c.maximized_horizontal
        c.maximized_vertical   = not c.maximized_vertical
        c:raise()
    end),

    awful.key({ modkey            }, "BackSpace",function (c)
        c:swap(awful.client.getmaster())
    end),

    awful.key({ modkey,           }, "Return",  function (c)
        if (c:tags()[2]) then
            awful.tag.viewonly(c:tags()[2])
        end
    end)
)
-- }}}

-- }}}

root.keys(globalkeys)
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))

