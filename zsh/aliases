# vim:set syntax=zsh:

alias -g G='| egrep -i --color=always'
alias -g M="| $__LESS"
alias -g Y="| xsel"
alias -g iy="| xsel"

alias ds="dirs -v | head -30 | sort -nr"
alias cs="history 0"
alias ll="/bin/ls --color=always -hFxtrl"
alias la="/bin/ls --color=always -hFXA"
alias ls="/bin/ls --color=always -hFv"
alias cp="cp -a"
alias rm="rm -r"
alias at="at -m"
alias diff="$__DIFF"
alias more="$__LESS"
alias tree="tree -C"
alias grep="grep --color=always"
alias egrep="egrep --color=always"
alias scp="scp -p"
alias lintian="lintian -viI"
alias tig="tig --all"
alias rsync="rsync -C"

hash -d archive=~/archive
hash -d desktop=~/desktop
hash -d dotfile=~/dotfiles
hash -d hacking=~/hacking
hash -d worktop=~/worktop
hash -d samba=~/samba

cd() {
    if builtin cd "$@"; then
        ls
    fi
}

vi() {
    # 使用 :w !sudo tee % 虽然可以写入，但是会缺少 undolist
    precommand=
    for i in "$@" ; do
        if [ -f "$i" -a ! -w "$i" ] ; then precommand=$__SUDO ; break ; fi
    done

    ${precommand} /usr/bin/vim -n "$@"
}

md() {
    /bin/mkdir $*
    cd $1
}

tcp() {
    tar cpf - ${(@)argv[1, -2]} | tar xvf - -C ${argv[-1]}
}

T() { # tail
    if [ -r $*[$#] ]; then
        tail $*
    else
        $__SUDO tail $*
    fi
}

K() { # kill
    killall -u $USER $1
}

P() { # ps
    ps -ef | grep "$1" | grep -v "grep"
}

PP() { # printer preview
    paps --landscape --font="monospace 8" --header --columns=2 $1 | ps2pdf - - | zathura -
}

PPP() {
    paps --landscape --font="monospace 8" --header --columns=2 $1 | lp -o landscape -o sites=two-sided-long-edge
}

/() { # find
    find ./ -iname "*$1*" ${(@)argv[2,$#]}
}

R() { # find in files
    egrep -ri --color=always \
        --exclude="*.old" --exclude="*.bak" --exclude="*.BAK" --exclude="*.orig" \
        --exclude="*.rej" --exclude="*.a" --exclude="*.olb" --exclude="*.o" \
        --exclude="*.obj" --exclude="*.so" --exclude="*.exe" --exclude="*.gz" \
        --exclude="*.tar" --exclude="*.zip" --exclude="*.tgz" --exclude="*.bz2" \
        --exclude="*.deb" --exclude="*.jar" --exclude="*.cab" --exclude="*.tbz" \
        --exclude="*.jpg" --exclude="*.jpeg" --exclude="*.png" --exclude="*.gif" \
        --exclude="*.pdf" --exclude-dir=".cscope" --exclude-dir=".svn" --exclude-dir=".git" \
        "$*" .
}

CS() { # gen cscope.files
    mkdir -p .cscope
    find . -iname '*.java' > .cscope/cscope_java.files
    find . -iname '*.c' -o -iname '*.cpp' -o -iname '*.cc' -o -iname '*.cxx' > .cscope/cscope_c.files
    find . -iname '*.h' -o -iname '*.hpp' -o -iname '*.hh' -o -iname '*.hxx' > .cscope/cscope_h.files
    cat .cscope/cscope_java.files .cscope/cscope_c.files .cscope/cscope_h.files > .cscope/cscope.files
    cscope -kbq -i.cscope/cscope.files -f.cscope/cscope.out
    ctags --c++-kinds=+p --fields=+iaS --extra=+q --tag-relative -L.cscope/cscope_java.files -f.cscope/cscope_java.tags
    ctags --c++-kinds=+p --fields=+iaS --extra=+q --tag-relative -L.cscope/cscope_c.files -f.cscope/cscope_c.tags
    ctags --c++-kinds=+p --fields=+iaS --extra=+q --tag-relative -L.cscope/cscope_h.files -f.cscope/cscope_h.tags
}

dup() { # dupload
    if echo "$1" | grep -q '\.changes$' ; then
        # dup *.changes
        /usr/bin/dupload $@
    else
        # dup 127 *.changes
        /usr/bin/dupload -t "$1" ${(@)argv[2,$#]}
    fi
}

# package {{{
DISTRO=`awk '/[:alpha:]/ { print $1; exit }' /etc/issue`
if [[ $DISTRO == "Debian" || $DISTRO == "Ubuntu" ]]; then
    alias api="$__SUDO apt-get install"
    alias apo="apt-get source"
    alias ape="$__SUDO vi /etc/apt/sources.list"
    alias apr="$__SUDO apt-get remove"
    alias apR="$__SUDO apt-get autoremove"
    alias apu="$__SUDO apt-get update"
    alias app="$__SUDO apt-get purge"
    alias apg="apt-cache search"
    alias aps="apt-cache show"
    alias apv="apt-cache policy"

    alias dpi="$__SUDO dpkg -i"
    alias dpp="$__SUDO dpkg -P"
    alias dpc="dpkg -c"
    alias dps="dpkg -I"
    alias dpo="dpkg -e"
    alias dpx="dpkg -x"
    alias dpg="dpkg -l | grep"
    alias dpG="dpkg -S"
    alias dpL="dpkg -L"
    dpH() { echo "$1 hold" | $__SUDO dpkg --set-selections }
    dpI() { echo "$1 install" | $__SUDO dpkg --set-selections }

elif [[ $DISTRO == "Fedora" || $DISTRO == "Red" ]]; then
	alias api="$__SUDO yum install"
	alias apa="$__SUDO yum clean all"
	alias apr="$__SUDO yum remove"
	alias apg="yum search"
	alias aps="yum info"

	alias dpi="$__SUDO rpm -iUfvh --replacefiles --replacepkgs --oldpackage"
	alias dpg="rpm -qa | grep"
    alias dpL="rpm -ql"
    alias dps="rpm -qi"
    alias dpr="$__SUDO rpm -e"
fi
# }}}

# task {{{
alias td="task"
alias tdo="~/.task/taskopen"
tda() { task add $* }
tde() { task $1 modify ${(@)argv[2,$#]} }
tdE() { task $1 edit }
tdu() { task $1 undo }
tdc() { task calendar }
tdg() { task $* list }
tdl() { task $* long }
tdci() { task $1 annotate ${(@)argv[2,$#]} }
tdco() { task $1 denotate ${(@)argv[2,$#]} }
tds() {
    task ${1} start
    DESC=`task rc.color=off rc.color.alternate=none info ${1} | /bin/grep "Desc" | cut -b13-`
    UUID=`task rc.color=off rc.color.alternate=none info ${1} | /bin/grep "UUID" | cut -b13-`
    REM=`date -d"today" +"REM AT 23:30 +900 *5 TAG ${UUID} MSG ${DESC}"`
    echo ${REM} >> ~/.task/reminders
}
tdp() {
    task ${1} stop
    UUID=`task rc.color=off rc.color.alternate=none info ${1} | /bin/grep "UUID" | cut -b13-`
    [[ -n ${UUID} ]] && sed -i '/'${UUID}'/d' ~/.task/reminders 2>&1 > /dev/null
}
tdd() {
    task ${1} done
    UUID=`task rc.color=off rc.color.alternate=none info ${1} | /bin/grep "UUID" | cut -b13-`
    [[ -n ${UUID} ]] && sed -i '/'${UUID}'/d' ~/.task/reminders 2>&1 > /dev/null
}
tdr() {
    task ${1} delete
    UUID=`task rc.color=off rc.color.alternate=none info ${1} | /bin/grep "UUID" | cut -b13-`
    [[ -n ${UUID} ]] && sed -i '/'${UUID}'/d' ~/.task/reminders 2>&1 > /dev/null
}
# }}}

# archive {{{
tgz() {
    name=`echo $1 | sed 's/\/*$//g'`
    tar -zcf "$name.tgz" $@
}
tgzz() {
    name=`echo $1 | sed 's/\/*$//g'`
    tar -zcf "$name.tgz" $@ --exclude=.cscope --exclude-vcs
}
tgx() {
    $__SUDO tar -zxvf $@
}
tgg() {
    tar -tf $@
}

tjz() {
    name=`echo $1 | sed 's/\/*$//g'`
    tar -jcf "$name.tbz" $@
}
tjzz() {
    name=`echo $1 | sed 's/\/*$//g'`
    tar -jcf "$name.tbz" $@ --exclude=.cscope --exclude-vcs
}
tjx() {
    $__SUDO tar -jxvf $@
}
tjg() {
    tar -tf $@
}
# }}}

# file {{{
alias -s png="qiv -p -l"
alias -s PNG="qiv -p -l"
alias -s gif="qiv -p -l"
alias -s GIF="qiv -p -l"
alias -s jpg="qiv -p -l"
alias -s JPG="qiv -p -l"
alias -s bmp="qiv -p -l"
alias -s BMP="qiv -p -l"
alias -s xpm="qiv -p -l"
alias -s XPM="qiv -p -l"
alias -s jpeg="qiv -p -l"
alias -s JPEG="qiv -p -l"
alias -s icon="qiv -p -l"
alias -s ICON="qiv -p -l"

alias -s doc=c_doc
alias -s xls=c_xls
alias -s pdf="zathura"
alias -s html=c_htm

c_doc() { antiword $1 | less }
c_xls() { xlhtml $1 | w3m -T text/html }
c_pdf() { pdftotext -q $1 - | less }
c_htm() { w3m -T text/html $1 }
# }}}

